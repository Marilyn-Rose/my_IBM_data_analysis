{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d0f2ef7c-fc9f-4e19-b3d1-edd943b2107e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8f295b9f-5c11-466f-b057-7714245e8d24",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "file_path = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv\"\n",
    "df = pd.read_csv(file_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a1e29b4-1b93-4629-89c0-bf8315f56f6a",
   "metadata": {},
   "source": [
    "# Distribution\n",
    "\n",
    "## Determine how the data is distributed\n",
    "\n",
    "The column `ConvertedComp` contains Salary converted to annual USD salaries using the exchange rate on 2019-02-01.\n",
    "\n",
    "This assumes 12 working months and 50 working weeks.\n",
    "\n",
    "\n",
    "Plot the distribution curve for the column `ConvertedComp`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5b6b6059-308e-4a6a-b7b4-e902c0f54a56",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dd2f98c3-5e8e-4e35-a49a-eadb99caeff1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_15504\\44203524.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(df['ConvertedComp'], hist = False)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['ConvertedComp'], hist = False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc2c3fb9-ed06-4317-bf0f-6ece7b2557bf",
   "metadata": {},
   "source": [
    "Plot the histogram for the column `ConvertedComp`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d2421b32-868f-425d-b41e-b3fb478628ee",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df['ConvertedComp'], bins=8)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be9e3864-757e-4a2b-94ff-3656b5041e0c",
   "metadata": {},
   "source": [
    "What is the median of the column `ConvertedComp`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dbe050eb-2098-4db5-a644-f3eb5089dc5a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The median of the column ConvertedComp is:  57745.0\n"
     ]
    }
   ],
   "source": [
    "print('The median of the column ConvertedComp is: ', df['ConvertedComp'].median())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faf3365b-183d-4104-9656-a9845bcbf2b4",
   "metadata": {},
   "source": [
    "How many responders identified themselves only as a **Man**?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fff15358-27e8-431b-ae23-5aef22ae6e58",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "True     10480\n",
       "False      918\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df['Gender']=='Man').value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cfe53df-b276-4a0c-a913-1989238b760f",
   "metadata": {},
   "source": [
    "What is the median **Age*** of survey respondents?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0a458cca-7bd1-40bf-aae6-72f43b851604",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Respondent</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11393</th>\n",
       "      <td>25136</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11394</th>\n",
       "      <td>25137</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11395</th>\n",
       "      <td>25138</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11396</th>\n",
       "      <td>25141</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11397</th>\n",
       "      <td>25142</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11398 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Respondent   Age\n",
       "0               4  22.0\n",
       "1               9  23.0\n",
       "2              13  28.0\n",
       "3              16  26.0\n",
       "4              17  29.0\n",
       "...           ...   ...\n",
       "11393       25136  36.0\n",
       "11394       25137  25.0\n",
       "11395       25138  34.0\n",
       "11396       25141  25.0\n",
       "11397       25142  30.0\n",
       "\n",
       "[11398 rows x 2 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median_RAge = df[['Respondent', 'Age']]\n",
    "median_RAge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "681311a4-0510-4159-aa75-bc0774499199",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29.0"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median_RAge['Age'].median()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a34f07fc-8fd3-4f51-b01a-2d3b9c48867e",
   "metadata": {
    "tags": []
   },
   "source": [
    "Find out the median ConvertedComp of responders identified themselves only as a `Woman`? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7506fc9d-a751-4193-b7e1-26e46d0f9515",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57708.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median_CC_woman = df[df['Gender'] == 'Woman']['ConvertedComp'].median()\n",
    "median_CC_woman"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0661c9ba-5a12-4e50-8329-bef5d6a4a3a7",
   "metadata": {},
   "source": [
    "Give the five number summary for the column `Age`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4f527988-c066-43fd-bd27-984c6555795c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    11111.000000\n",
       "mean        30.778895\n",
       "std          7.393686\n",
       "min         16.000000\n",
       "25%         25.000000\n",
       "50%         29.000000\n",
       "75%         35.000000\n",
       "max         99.000000\n",
       "Name: Age, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Age'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c08e67d0-6412-4007-a3f6-4ac1432fd6af",
   "metadata": {},
   "source": [
    "Plot a histogram of the column `Age`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f8ae9b74-875c-4808-b1c8-5535ca85c210",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df['Age'], bins = 10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74cea2f0-6016-4780-9973-9c043be5fea8",
   "metadata": {},
   "source": [
    "# Outliers\n",
    "\n",
    "## Finding outliers\n",
    "\n",
    "Find out if outliers exist in the column `ConvertedComp` using a box plot?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d1dd02e9-73c5-4517-a868-82d163a938c2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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+vzzz3Xy5Eldd911Xu+3aNEiFRYWej5XWlqa12cfMWJEo59Pcz8b6fQtuA8cOKCRI0d6tY8cOdLr5yNJAwcO9DyPjY2VJKWmpnq1NfyZSdKgQYMUERHhNcbKykoVFxc3Oy7gQsFCSMAievfuLZvNpl27dp11Qd/ZvjjPbA8ODvbqt9lscrvdnuPx48fL7Xbrvffe07Bhw5Sfn69nn33W0+92uzVr1ixNnDix0Z8VFhbmed6+fftzfq76P/e9997TRRdd5NVXfwMrw4db4PTp06fRF//ZnPkzaurn1vBnVN93ZlvDn1lL/jzgQsVMA2ARMTExGjNmjF566SVVVVU16i8tLVVKSoqKioq8/mX7+eefq6ysTP369fP5zwoPD9fEiRP15ptvavHixerTp4+GDBni6b/88sv15ZdfKjk5udEjKOjsf22EhIRIklwul6ctJSVFoaGhKioqavRe9TMmKSkp+uSTT7ze68zjO+64Q1999ZVWrlzZ6M81DENlZWWKjIxUjx49tHHjRq/+TZs2tejnczbbt29XdXW11xg7dOignj17fuf3BgIBoQGwkPnz58vlcumKK67QsmXLtHv3bu3atUt/+MMfNGLECF177bUaOHCgfvjDH+rf//63PvvsM9111126+uqrfTpV0NAPf/hDvffee3rttdd05513evX95je/0aJFi/Tkk09q586d2rVrl5YsWaLHH3+82ffs1auXbDab8vLydPjwYVVWVqpjx4566KGH9OCDD+ovf/mLCgsLtXXrVr300kv6y1/+IkmaMmWKCgsLNX36dH355Zd66623tHDhQq/3vu222zR58mTdfvvtysnJ0ebNm/XNN98oLy9P1157rdauXStJevjhhzVnzhwtWbJEX375pR599FFt27ZNDzzwQIt+Pk2pra3VPffco88//1zvv/++nnjiCd1///3NBingguLH9RQAmnDgwAFj6tSpRq9evYyQkBDjoosuMm666SZj7dq1hmH4fsllQ7///e+NXr16ebXV1dUZcXFxhiSjsLCw0Tg++OADIz093QgPDzciIyONK664wnj11Vc9/ZKM5cuXN3rdU089ZXTv3t2w2Wxel1w+//zzRt++fY3g4GCja9euxpgxY4z169d7Xvf3v//dSE5ONkJDQ42MjAzjtddea7So0uVyGS+//LIxbNgwIyIiwoiMjDSGDBliPP/888aJEyc8NfWXXAYHB5/1ksutW7d62ppawPn6668bUVFRnuP6Sy5/85vfGJ07dzY6dOhg3HvvvcbJkycb/QyAC5XNMHw4mQgA33M/+tGPVFpaqhUrVvh7KIDfMKcGAAB8QmgAAAA+4fQEAADwCTMNAADAJ4QGAADgE0IDAADwCaEBAAD4hNAAAAB8QmgAAAA+ITQAAACfEBoAAIBP/n/bM3NGq8hILAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 600x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,10))\n",
    "df['ConvertedComp'].plot(kind = 'box')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c603156-ee94-4551-b290-579b55b8263f",
   "metadata": {},
   "source": [
    "Find out the Inter Quartile Range for the column `ConvertedComp`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "dee17955-af25-4b6b-8d70-409a0949a83a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inter Quartile Range for ConvertedComp: 73132.0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "Q1 = df['ConvertedComp'].quantile(0.25) #25th percentile\n",
    "Q3 = df['ConvertedComp'].quantile(0.75) #75th percentile\n",
    "\n",
    "# Calculate the Interquartile Range (IQR)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "print(f\"Inter Quartile Range for ConvertedComp: {IQR}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6322779a-7dda-46ba-a91e-e57cc6bc8220",
   "metadata": {},
   "source": [
    "Find out the upper and lower bounds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "481708bd-dfd6-4de6-aba8-2470deec82b3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Upper bounds:209698.0\n",
      "Lower bounds:-82830.0\n"
     ]
    }
   ],
   "source": [
    "Upper_bounds = Q3 + IQR * 1.5\n",
    "Lower_bounds = Q1 - IQR * 1.5\n",
    "\n",
    "print(f\"Upper bounds:{Upper_bounds}\")\n",
    "print(f\"Lower bounds:{Lower_bounds}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f2acc2f-57a6-4f30-9118-2acffeeb6f15",
   "metadata": {},
   "source": [
    "Create a new dataframe by removing the outliers from the `ConvertedComp` column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f03188a0-6ccf-40e7-b5cb-038bee6b70ea",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "outlier_CC = df[df['ConvertedComp'] > 1.5 *( Q3 - Q1) + Q3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1512476d-7e5e-4277-81c9-3d00d8f1c98c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a new DataFrame without outliers\n",
    "df_cleaned = df[(df['ConvertedComp'] >= Lower_bounds) & (df['ConvertedComp'] <= Upper_bounds)]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35103927-8015-400c-b18b-17a3f8b97b95",
   "metadata": {},
   "source": [
    "What is the median **ConvertedComp** after removing outliers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "a8b52d6a-12a0-40c1-a0d0-13379b44398b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The median of the column ConvertedComp after removing outliers is:  52704.0\n"
     ]
    }
   ],
   "source": [
    "print('The median of the column ConvertedComp after removing outliers is: ', df_cleaned['ConvertedComp'].median())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "857cfa03-823c-45ed-b482-ac33025fe6fc",
   "metadata": {},
   "source": [
    "What is the mean **ConvertedComp** after removing outliers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2b2ec515-6dcc-4e4a-8147-e56f43c908c3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of ConvertedComp after removing outliers: 59883.20838915799\n"
     ]
    }
   ],
   "source": [
    "print('Mean of ConvertedComp after removing outliers:',df_cleaned['ConvertedComp'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c5e5d8c9-1da7-4524-b6e6-b2289e715b12",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Respondent</th>\n",
       "      <th>CompTotal</th>\n",
       "      <th>ConvertedComp</th>\n",
       "      <th>WorkWeekHrs</th>\n",
       "      <th>CodeRevHrs</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9703.000000</td>\n",
       "      <td>9.703000e+03</td>\n",
       "      <td>9703.000000</td>\n",
       "      <td>9664.000000</td>\n",
       "      <td>7612.000000</td>\n",
       "      <td>9493.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12501.007317</td>\n",
       "      <td>7.241139e+05</td>\n",
       "      <td>59883.208389</td>\n",
       "      <td>41.864782</td>\n",
       "      <td>4.737455</td>\n",
       "      <td>30.695860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7235.627217</td>\n",
       "      <td>7.186806e+06</td>\n",
       "      <td>43394.336755</td>\n",
       "      <td>24.613489</td>\n",
       "      <td>4.420472</td>\n",
       "      <td>7.346625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6237.000000</td>\n",
       "      <td>2.000000e+04</td>\n",
       "      <td>24060.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>12571.000000</td>\n",
       "      <td>6.300000e+04</td>\n",
       "      <td>52704.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>29.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>18787.500000</td>\n",
       "      <td>1.150000e+05</td>\n",
       "      <td>85574.500000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>34.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>25141.000000</td>\n",
       "      <td>3.900000e+08</td>\n",
       "      <td>209356.000000</td>\n",
       "      <td>1012.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Respondent     CompTotal  ConvertedComp  WorkWeekHrs   CodeRevHrs  \\\n",
       "count   9703.000000  9.703000e+03    9703.000000  9664.000000  7612.000000   \n",
       "mean   12501.007317  7.241139e+05   59883.208389    41.864782     4.737455   \n",
       "std     7235.627217  7.186806e+06   43394.336755    24.613489     4.420472   \n",
       "min        4.000000  0.000000e+00       0.000000     3.000000     0.000000   \n",
       "25%     6237.000000  2.000000e+04   24060.000000    40.000000     2.000000   \n",
       "50%    12571.000000  6.300000e+04   52704.000000    40.000000     4.000000   \n",
       "75%    18787.500000  1.150000e+05   85574.500000    42.000000     5.000000   \n",
       "max    25141.000000  3.900000e+08  209356.000000  1012.000000    99.000000   \n",
       "\n",
       "               Age  \n",
       "count  9493.000000  \n",
       "mean     30.695860  \n",
       "std       7.346625  \n",
       "min      16.000000  \n",
       "25%      25.000000  \n",
       "50%      29.000000  \n",
       "75%      34.000000  \n",
       "max      99.000000  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cleaned.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50f67481-e8af-47f8-9a20-8b0aeab0de9c",
   "metadata": {},
   "source": [
    "# Correlation\n",
    "\n",
    "## Finding correlation\n",
    "\n",
    "Find the correlation between `Age` and all other numerical columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "63b0641e-1f82-4705-bb24-cd7e2a86aa30",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_numer = df_cleaned.select_dtypes(include=['number'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "e9dea184-1000-4c12-9f5e-1cd82e831be8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Respondent</th>\n",
       "      <th>CompTotal</th>\n",
       "      <th>ConvertedComp</th>\n",
       "      <th>WorkWeekHrs</th>\n",
       "      <th>CodeRevHrs</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Respondent</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.019354</td>\n",
       "      <td>0.010878</td>\n",
       "      <td>-0.016221</td>\n",
       "      <td>0.005293</td>\n",
       "      <td>0.002180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CompTotal</th>\n",
       "      <td>-0.019354</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.063561</td>\n",
       "      <td>0.004910</td>\n",
       "      <td>0.017007</td>\n",
       "      <td>0.006337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ConvertedComp</th>\n",
       "      <td>0.010878</td>\n",
       "      <td>-0.063561</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.034351</td>\n",
       "      <td>-0.088934</td>\n",
       "      <td>0.401821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WorkWeekHrs</th>\n",
       "      <td>-0.016221</td>\n",
       "      <td>0.004910</td>\n",
       "      <td>0.034351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.038935</td>\n",
       "      <td>0.032032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CodeRevHrs</th>\n",
       "      <td>0.005293</td>\n",
       "      <td>0.017007</td>\n",
       "      <td>-0.088934</td>\n",
       "      <td>0.038935</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.012878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0.002180</td>\n",
       "      <td>0.006337</td>\n",
       "      <td>0.401821</td>\n",
       "      <td>0.032032</td>\n",
       "      <td>-0.012878</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Respondent  CompTotal  ConvertedComp  WorkWeekHrs  CodeRevHrs  \\\n",
       "Respondent       1.000000  -0.019354       0.010878    -0.016221    0.005293   \n",
       "CompTotal       -0.019354   1.000000      -0.063561     0.004910    0.017007   \n",
       "ConvertedComp    0.010878  -0.063561       1.000000     0.034351   -0.088934   \n",
       "WorkWeekHrs     -0.016221   0.004910       0.034351     1.000000    0.038935   \n",
       "CodeRevHrs       0.005293   0.017007      -0.088934     0.038935    1.000000   \n",
       "Age              0.002180   0.006337       0.401821     0.032032   -0.012878   \n",
       "\n",
       "                    Age  \n",
       "Respondent     0.002180  \n",
       "CompTotal      0.006337  \n",
       "ConvertedComp  0.401821  \n",
       "WorkWeekHrs    0.032032  \n",
       "CodeRevHrs    -0.012878  \n",
       "Age            1.000000  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_numer.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91bd9e15-90ea-4a31-8eef-fef74b5c6ee5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
